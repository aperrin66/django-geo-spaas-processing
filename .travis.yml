---
language: shell
services:
  - docker

# Environment variables defined as part of the Travis CI repository configuration are:
# - COVERALLS_REPO_TOKEN: token for authentication to Coveralls
# - DOCKER_ORG: the docker hub organization (or user) to which the image will be pushed
# - DOCKER_USER: the docker hub user used to log in to the docker hub
# - DOCKER_PASS: the password of this user
# - GEOSPAAS_DB_PASSWORD: the password for connecting to the test database

env:
  global:
    - BASE_IMAGE_NAME="${DOCKER_ORG}/geospaas:2.3.3-slim"
    - IMAGE_NAME_WORKER="${DOCKER_ORG}/geospaas_processing_worker"
    - IMAGE_NAME_CLI="${DOCKER_ORG}/geospaas_processing_cli"
    - IDF_CONVERTER_VERSION=0.0.124
jobs:
  include:
    - stage: 'Unit tests'
      if: 'type = push'
      env:
        - GEOSPAAS_DB_HOST='db'
        - GEOSPAAS_DB_USER='test'
      install:
        - docker network create testing
        - >
          docker run -d --rm
          --network testing
          --name "$GEOSPAAS_DB_HOST"
          -e "POSTGRES_USER=$GEOSPAAS_DB_USER" -e "POSTGRES_PASSWORD=$GEOSPAAS_DB_PASSWORD"
          'postgis/postgis:12-3.0'
        - >
          docker build .
          -f Dockerfile_worker
          -t "${IMAGE_NAME_WORKER}"
          --build-arg "BASE_IMAGE=${BASE_IMAGE_NAME}"
          --target base
        - >
          docker build .
          -f Dockerfile_cli
          -t "${IMAGE_NAME_CLI}"
          --build-arg "BASE_IMAGE=${BASE_IMAGE_NAME}"
          --target base
      script:
        include:
          - >
            docker run --rm
            --network testing
            -v "$(pwd):/src"
            -e "COVERALLS_REPO_TOKEN=$COVERALLS_REPO_TOKEN"
            -e "TRAVIS=true" -e "TRAVIS_JOB_ID=$TRAVIS_JOB_ID"
            -e "TRAVIS_BRANCH=$TRAVIS_BRANCH" -e "TRAVIS_PULL_REQUEST=$TRAVIS_PULL_REQUEST"
            -e "GEOSPAAS_DB_HOST=$GEOSPAAS_DB_HOST"
            -e "GEOSPAAS_DB_USER=$GEOSPAAS_DB_USER" -e "GEOSPAAS_DB_PASSWORD=$GEOSPAAS_DB_PASSWORD"
            --entrypoint bash
            "${IMAGE_NAME_WORKER}"
            -c "coverage run --source=geospaas_processing /src/runtests.py && coveralls"
          - >
            docker run --rm
            --network testing
            -v "$(pwd):/src"
            -e "COVERALLS_REPO_TOKEN=$COVERALLS_REPO_TOKEN"
            -e "TRAVIS=true" -e "TRAVIS_JOB_ID=$TRAVIS_JOB_ID"
            -e "TRAVIS_BRANCH=$TRAVIS_BRANCH" -e "TRAVIS_PULL_REQUEST=$TRAVIS_PULL_REQUEST"
            -e "GEOSPAAS_DB_HOST=$GEOSPAAS_DB_HOST"
            -e "GEOSPAAS_DB_USER=$GEOSPAAS_DB_USER" -e "GEOSPAAS_DB_PASSWORD=$GEOSPAAS_DB_PASSWORD"
            --entrypoint bash
            "${IMAGE_NAME_CLI}"
            -c "coverage run --source=geospaas_processing /src/runtests.py && coveralls"
      after_script:
        - docker stop "$GEOSPAAS_DB_HOST"

    - stage: 'Build and release'
      name: 'Build worker the Docker image'
      if: type = pull_request OR tag IS present
      env:
        - DOCKER_TMP_TAG='tmp'
      install:
        - >
          curl -L -o ./idf_converter.tar.gz
          -H "Authorization: token ${GITHUB_API_TOKEN}"
          -H 'Accept: application/vnd.github.v3.raw'
          "https://api.github.com/repos/nansencenter/idf-converter/contents/idf_converter-${IDF_CONVERTER_VERSION}.tar.gz"
        - docker pull "${IMAGE_NAME_WORKER}" || true
      script:
        - >
          docker build .
          -f Dockerfile_cli
          --cache-from "${IMAGE_NAME_WORKER}"
          --build-arg "BASE_IMAGE=$BASE_IMAGE_NAME"
          -t "${IMAGE_NAME_WORKER}:${DOCKER_TMP_TAG}"
      before_deploy:
        - docker login -u "${DOCKER_USER}" -p "${DOCKER_PASS}"
      deploy:
        provider: script
        on:
          tags: true
        script: /bin/bash scripts/docker_push.sh "${TRAVIS_TAG}" latest

    - if: tag IS present
      name: 'Build and release the Python package'
      script:
        - docker run --rm -v "$(pwd):/src" "${BASE_IMAGE_NAME}" python setup.py sdist bdist_wheel
      deploy:
        on:
          tags: true
          condition: -n "${GITHUB_API_TOKEN}"
        provider: releases
        api_key: "${GITHUB_API_TOKEN}"
        file: 'dist/*'
        file_glob: true
        skip_cleanup: true
...
